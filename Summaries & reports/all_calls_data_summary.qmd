---
title: "All Calls Data: Summary Report"
subtitle: "Stat 390 Project with Legal Aid Chicago"
author: "Maia Sporn"
format: html
code-fold: true
---

## Initial Cleaning


```{r}
#| warning: false
# load packages and data
library(readxl)
library(tidyverse)
library(skimr)
library(knitr)
library(janitor)

months <- c(
  "April 2024", "May 2024", "June 2024", "July 2024", "August 2024", "September 2024",
  "October 2024", "December 2024", "January 2025", "February 2025", "March 2025"
  )

for (month in months) {
  var_name <- paste0(tolower(substr(month, 1, 3)), "_", substr(month, nchar(month) - 1, nchar(month)))
  path <- paste0("All Calls by Month/", month, ".xlsx")
  
  data <- read_excel(path) %>%
    clean_names() %>%
    mutate(across(everything(), as.character)) %>%
    mutate(across(everything(), ~ ifelse(. %in% c("na", "NA", ""), NA, .))) %>%
    mutate(month = month)
  
  assign(var_name, data)
  }

# combine months
all_calls <- 
  bind_rows(apr_24, may_24, jun_24, jul_24, aug_24, sep_24, oct_24, dec_24, jan_25, feb_25, mar_25) %>%
  mutate(month = factor(
    month, 
    levels = c("April 2024", "May 2024", "June 2024", "July 2024", "August 2024", "September 2024", 
               "October 2024", "December 2024", "January 2025", "February 2025", "March 2025"), ordered = TRUE),
    across(where(is.logical), as.character),
    model = as.character(model),
    duration = as.numeric(duration),
    ring_duration = as.numeric(ring_duration),
    site_main_number = as.character(site_main_number),
    site_timezone = as.character(site_timezone),
    user_number = as.character(user_number)
  )

write_csv(all_calls, file = "all_calls.csv")
```

- Data from each of the 11 months (April 2024 — March 2025, excluding November 2024) were merged into one dataset.
- Month was added when datasets were appended and also changed to an ordered factor with 11 levels for the 11 months of data (see below for breakdown).
- The non-continuous variables for site main number, site timezone, and user number were converted to categorical variables.

```{r}
# find which columns are missing in some months
# setdiff(names(mar_25), names(apr_24))
# setdiff(names(mar_25), names(dec_24))

# get counts by month
total_calls <- all_calls %>% nrow()
month_breakdown <- all_calls %>% 
  count(month) %>%
  mutate(Percent = round(n / total_calls * 100, 2)) %>%
  rename(Count = n, Month = month)

month_breakdown %>% 
  kable()
```

## Data Overview

```{r}
#| eval: false
# find combination of variables to make up unique key
max_combination_size <- 4
cols <- colnames(all_calls)
unique_keys <- list()

# try all combinations of columns up to a certain size
for (k in 1:max_combination_size) {
  combs <- combn(cols, k, simplify = FALSE)
  for (combo in combs) {
    if (anyDuplicated(all_calls[, combo]) == 0) {
      unique_keys[[paste(combo, collapse = ", ")]] <- combo
      break
    }
  }
  if (length(unique_keys) > 0) break  # stop once we find a unique combo
}
names(unique_keys)
```

- There are 660,413 rows and 65 columns in the merged data (including the added month column).

  - However, only March 2025 contains all 65 columns.
  - July, August, September, October, and December 2024 only contain 56; these months are missing user, external caller ID number, device owner UUID, call recording platform name, call recording result, call recording trigger, redirecting party UUID, public calling IP address, public called IP address.
  - April, May, and June 2024, along with January and February 2025, have 64 columns, only missing user.
  
- Data is at the **call leg level** — each report ID is unique within each month's dataset, so when using merged data the unique identifier for each observation is (report_id, month).

  - Correlation ID is used to tie multiple legs together.

```{r}
# get skim of full data
skim_without_charts(all_calls)
```

```{r}
#| echo: false
#| results: hide
# another way of showing numeric vars summary
numeric_summary_tbl <- all_calls %>%
  select(where(is.numeric)) %>%
  vtable::st(out = "return")

numeric_missing_tbl <- all_calls %>%
  select(where(is.numeric)) %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(everything(), names_to = "Variable", values_to = "n_miss") %>%
  mutate(pct_miss = round(n_miss / nrow(all_calls) * 100, 2))

summary_with_missing <- left_join(numeric_summary_tbl, numeric_missing_tbl, by = "Variable")
summary_with_missing %>%
  knitr::kable()

# get numeric distributions
numeric_summary_tbl <- all_calls %>%
  select(where(is.numeric)) %>%
  summary()
numeric_summary_tbl %>% kable()
```

## Categorical Variables

```{r}
# function to get categorical vars summary
summarize_categoricals <- function(df, max_examples = 5) {
  # get names of logical, character, or factor variables
  cat_logical_vars <- names(df)[sapply(df, function(x) {(is.character(x) || is.factor(x) || is.logical(x)) && !all(is.na(x))})]
  
  summaries <- lapply(cat_logical_vars, function(var) {
    freq_table <- sort(table(df[[var]], useNA = "no"), decreasing = TRUE)
    total_unique <- length(freq_table)
    
    # skip if no non-missing values
    if (total_unique == 0) return(NULL)
    
    example_vals <- names(freq_table)[1:min(max_examples, total_unique)]
    example_counts <- as.numeric(freq_table[example_vals])
    example_str <- paste0(mapply(function(val, count) paste0(val, " (", count, ")"), example_vals, example_counts), collapse = "; ")
    
    if (total_unique > max_examples) {example_str <- paste0(example_str, "; ... [Total: ", total_unique, " categories]")}
    data.frame(variable = var, examples = example_str, total_categories = total_unique,stringsAsFactors = FALSE)
    })

  result <- do.call(rbind, summaries)
  
  if (!is.null(result)) {result} 
  else {data.frame(variable = character(), examples = character(), total_categories = integer())}
  }

# get table
summary_table <- summarize_categoricals(all_calls)
knitr::kable(summary_table)
```

## Missing Data

- Not all NA values are necessarily "missing"; it may be that certain variables are not applicable or relevant to particular calls.

```{r}
#| warning: false
# plot counts of missing data
na_plot <- all_calls %>%
  select(where(~ any(is.na(.)))) %>%
  naniar::gg_miss_var() +
  labs(x = "Number of NA Values", y = "Variable") +
  scale_y_continuous(labels = scales::label_number(big.mark = ",")) +
  theme_minimal(base_size = 11) +
  theme(
    axis.text.y = element_text(size = 7),
    axis.text.x = element_text(size = 8), 
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10)
  ) + coord_flip()
na_plot
ggsave(filename = "na_plot.jpg", plot = na_plot, width = 8, height = 6)
```

```{r}
all_calls %>% naniar::miss_var_summary() %>% arrange(desc(n_miss)) %>% kable()
```


## Data Dictionary

```{r}
variables <- tibble(variable = colnames(all_calls))

# import data dictionary
dict <- read_excel("All Calls by Month/All Calls_Codebook.xlsx")
dict$variable <- janitor::make_clean_names(dict$variable)

final_dict <- left_join(variables, dict, by = "variable") %>%
  mutate(description = ifelse(variable == "month", "Month of the call.", description)) %>%
  mutate(description = ifelse(variable == "user", "Represents the display name for the type of user who made or received the call.", description))

final_dict %>% knitr::kable()
```


